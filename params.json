{
  "name": "React Infinite Scroller",
  "tagline": "Infinite scroll component for React in ES6",
  "body": "[![npm](https://img.shields.io/npm/dt/react-infinite-scroller.svg?style=flat-square)](https://www.npmjs.com/package/react-infinite-scroller)\r\n[![React Version](https://img.shields.io/badge/React-15.0.2-blue.svg?style=flat-square)](https://www.npmjs.com/package/react)\r\n[![npm](https://img.shields.io/npm/v/react-infinite-scroller.svg?style=flat-square)](https://www.npmjs.com/package/react-infinite-scroller)\r\n[![npm](https://img.shields.io/npm/l/react-infinite-scroller.svg?style=flat-square)](https://github.com/CassetteRocks/react-infinite-scroller/blob/master/LICENSE)\r\n\r\nInfinitely load content using a React Component. This fork maintains a simple, lightweight infinite scroll package that supports both `window` and scrollable elements.\r\n\r\n## Installation\r\n\r\n```\r\n  npm i react-infinite-scroller\r\n```\r\n\r\n## How to use\r\n\r\nThe module supports ES6 imports with `jsnext:main` and require with `main` in the package.json.\r\n\r\n```\r\n  import InfiniteScroll from 'react-infinite-scroller'\r\n```\r\n\r\n### Window scroll events\r\n\r\n```html\r\n  <InfiniteScroll\r\n      pageStart={0}\r\n      loadMore={loadFunc}\r\n      hasMore={true || false}\r\n      loader={<div className=\"loader\">Loading ...</div>}>\r\n    {items} // <-- This is the content you want to load\r\n  </InfiniteScroll>\r\n```\r\n\r\n### DOM scroll events\r\n\r\n```html\r\n  <div style=\"height:700px;overflow:auto;\">\r\n    <InfiniteScroll\r\n        pageStart={0}\r\n        loadMore={loadFunc}\r\n        hasMore={true || false}\r\n        loader={<div className=\"loader\">Loading ...</div>}\r\n        useWindow={false}>\r\n      {items}\r\n    </InfiniteScroll>\r\n  </div>\r\n```\r\n\r\n- `pageStart` : The page number corresponding to the initial `items`, defaults to `0`\r\n                which means that for the first loading, `loadMore` will be called with `1`\r\n\r\n- `loadMore(pageToLoad)` : This function is called when the user scrolls down\r\n                           and we need to load items\r\n\r\n- `hasMore` : Boolean stating whether there are more items to be loaded. Event listeners\r\n              are removed if `false`.\r\n\r\n- `loader` : Loader element to be displayed while loading items - You can use\r\n             `InfiniteScroll.setDefaultLoader(loader);` to set a defaut loader\r\n             for all your `InfiniteScroll` components\r\n\r\n- `threshold` : The distance between the bottom of the page and the bottom of the\r\n                window's viewport that triggers the loading of new items -\r\n                *Defaults to `250`*\r\n\r\n- `useWindow` : Boolean stating whether to add listeners to the window, or else, the DOMNode",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}